generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  username      String         @unique
  name          String?
  popularity    Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  connections   Connection[]
  password      Password?
  reports       Report[]
  sessions      Session[]
  tickets       Ticket[]
  gameRoles     UserGameRole[]
  image         UserImage?
  roles         UserRole[]
  videos        Video[]
  videoComments VideoComment[]
  notes         Note[]
  NoteComment   NoteComment[]
}

model UserRole {
  id          String                 @id @default(cuid())
  roleId      String
  userId      String
  user        User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role        Role                   @relation(fields: [roleId], references: [id])
  permissions PermissionToUserRole[]
}

model UserGameRole {
  id     String @id @default(cuid())
  type   String
  power  Int    @default(0)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Permission {
  id          String                 @id @default(cuid())
  action      String
  entity      String
  access      String
  description String                 @default("")
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  roles       PermissionToUserRole[]

  @@unique([action, entity, access])
}

model PermissionToUserRole {
  permissionId String
  userRoleId   String
  permission   Permission @relation(fields: [permissionId], references: [id])
  userRole     UserRole   @relation(fields: [userRoleId], references: [id])

  @@id([permissionId, userRoleId])
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String     @default("")
  roles       UserRole[]
}

model Note {
  id        String        @id @default(cuid())
  title     String
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  ownerId   String
  comments  NoteComment[]
  owner     User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  images    NoteImage[]
  reports   Report[]
  tickets   Ticket[]

  @@index([ownerId])
  @@index([ownerId, updatedAt])
}

model Video {
  id           String         @id @default(cuid())
  title        String
  description  String?
  videoLink    String // Link to the video
  thumbnail    String? // Optional link to a thumbnail or preview image
  contentType  String // Video format or MIME type
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ownerId      String
  owner        User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  comments     VideoComment[]
  reports      Report[]
  tickets      Ticket[]
  totalTickets Int            @default(0)
}

model NoteComment {
  id      String @id @default(cuid())
  userId  String
  noteId  String
  content String
  note    Note   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id])
}

model VideoComment {
  id      String @id @default(cuid())
  userId  String
  videoId String
  content String
  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id])
}

model NoteImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  noteId      String
  note        Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@index([noteId])
}

model UserImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model Report {
  id      String  @id @default(cuid())
  videoId String?
  userId  String
  reason  String
  video   Video?  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Note    Note?   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId  String?
}

model Ticket {
  id          String       @id @default(cuid())
  videoId     String?
  userId      String
  totalPower  Int
  video       Video?       @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleTickets RoleTicket[]
  Note        Note?        @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId      String?
}

model RoleTicket {
  id       String @id @default(cuid())
  ticketId String
  roleType String // e.g., "Artist", "Critic", etc.
  power    Int
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}
